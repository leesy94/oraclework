 /*
    JOIN
    두 개 이상의 테이블에서 데이터를 조회하고자 할 때 사용되는 구문
    조회 결과는 하나의 결과물(RESULT SET)로 나옴
    
    관계형 데이터베이스는 최소한 데이터로 가각 테이블에 담고 있음
    (중복을 최소화하기 위해 최대한 나누어서 관리)
    
    => 관계형 데이터베이스에서 SQL문을 이용한 테이블간의 "관계"를 맺는 방법
    
    JOIN은 크기 "오라클전용구문" 과 "ANSI" 구문 (ANSI = 미국국립표준협회)
    
    [용어 정리]
    오라클 전용 구문                                               ANSI
    등가조인 (EQUAL JOIN)                                   내부조인(INNER JOIN) => JOIN USING/ON
                                                                                  자연조인(NATURAL JOIN) => JOIN USING
    포괄조인                                                              왼쪽조인(LEFT OUTEER JOIN)
    (LEFT OUTER)                                                  오른쪽 조인(RIGHT OUTER JOIN)
    (RIGHT OUTER)
    자체조인(SELF JOIN)                                       JOIN ON
    비등가 조인(NONE EQUAL JOIN)	                 JOIN ON
    카테시안 곱(CARTESIAN PRODUCT)	
 */
 
 /* 등가조인(EQUAL JOIN) / 내부조인(INNER JOIN)
  연결시키고자 하는 컬럼 값이 일치하는 행 들만 조인됨 (일치하는 값이 없으면 조회 제외)

    FROM에 조회하고자 하는 테이블들을 나열(, 구분자로 조회)
    WHERE절에 매칭시킬 컬럼
*/
SELECT EMP_ID,EMP_NAME,DEPT_CODE,DEPT_TITLE
 FROM EMPLOYEE , DEPARTMENT
 WHERE DEPT_CODE = DEPT_ID;
 
 
 //   연결할 두 컬럼명이 같은 경우
 // 1. 테이블명 이용
 SELECT EMP_ID,EMP_NAME,EMPLOYEE.JOB_CODE,JOB_NAME
 FROM EMPLOYEE , JOB
 WHERE EMPLOYEE.JOB_CODE = JOB.JOB_CODE
 ORDER BY 3;
 
 //2. 테이블에 별칭을 부여하여 이용
  SELECT EMP_ID,EMP_NAME,E.JOB_CODE,JOB_NAME
 FROM EMPLOYEE E, JOB J
 WHERE E.JOB_CODE = J.JOB_CODE
 ORDER BY 3;
 
 /*
    ANSI
    FROM에 기준이되는 테이블을 하나만 기술
    JOIN절에 같이 조회하고자하는 테이블을 기술 + 매칭시킬 컬럼에 대한 조건도 기술
    => JOIN USING, JOIN ON
 */
 // 1. 별칭사용
 SELECT EMP_ID,EMP_NAME,DEPT_CODE,DEPT_TITLE
 FROM EMPLOYEE JOIN DEPARTMENT
 ON DEPT_CODE = DEPT_CODE;
 
 SELECT EMP_ID,EMP_NAME,E.JOB_CODE,JOB_NAME
 FROM EMPLOYEE E JOIN JOB J
 ON (E.JOB_CODE = J.JOB_CODE);
 
 //2. JOIN USING 사용 (두 컬럼명이 일치할때)
 SELECT EMP_ID,EMP_NAME,JOB_CODE,JOB_NAME
 FROM EMPLOYEE JOIN JOB USING (JOB_CODE);
 
 //참고사항
 // 자연조인 : 각 테이블마다 동일한 컬럼이 한 개만 존재 할 경우
  SELECT EMP_ID,EMP_NAME,JOB_CODE,JOB_NAME
 FROM EMPLOYEE NATURAL JOIN JOB ;
 
 SELECT EMP_ID,EMP_NAME,JOB_NAME,SALARY
 FROM EMPLOYEE E, JOB J
 WHERE E.JOB_CODE = J.JOB_CODE
 AND JOB_NAME = '대리';
 
  SELECT EMP_ID,EMP_NAME,JOB_CODE,JOB_NAME
 FROM EMPLOYEE JOIN JOB USING (JOB_CODE)
 WHERE JOB_NAME = '대리';
 
 //문제
 //1.
 SELECT EMP_ID,EMP_NAME,DEPT_TITLE,BONUS 
 FROM EMPLOYEE , DEPARTMENT
 WHERE DEPT_CODE = DEPT_ID
 AND DEPT_TITLE = '인사관리부'
 ORDER BY DEPT_CODE;
 //2
 SELECT DEPT_ID,DEPT_TITLE,LOCAL_CODE,LOCAL_NAME
 FROM DEPARTMENT D JOIN LOCATION L ON
 d.location_id = l.local_code
 ORDER BY D.LOCATION_ID ;
 
  SELECT DEPT_ID,DEPT_TITLE,LOCAL_CODE,LOCAL_NAME
 FROM DEPARTMENT , LOCATION 
 WHERE location_id = local_code
 ORDER BY LOCATION_ID ;
 //3
 SELECT EMP_ID,EMP_NAME,BONUS,DEPT_TITLE
 FROM EMPLOYEE E JOIN DEPARTMENT D ON
 e.dept_code = d.dept_id WHERE E.BONUS IS NOT NULL
 ORDER BY E.DEPT_CODE;
 //4
 SELECT EMP_NAME,SALARY,DEPT_TITLE
 FROM EMPLOYEE E,DEPARTMENT D
  WHERE DEPT_CODE = DEPT_ID
  AND d.dept_title NOT IN('총무부');
 
 /*
   포괄조인 / 외부조인(outer join)
   두 테이블간 join시 일치하지 않는 행도 포함
   단 ,left,right 지정해야됨(기준이 되는 테이블)
 */
SELECT *  FROM EMPLOYEE 
JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID;

//LEFT (OUTER) JOIN
SELECT EMP_NAME,SALARY*12 연봉 , SALARY,DEPT_TITLE 
FROM EMPLOYEE 
LEFT JOIN DEPARTMENT ON DEPT_CODE = DEPT_ID;

//오라클
SELECT EMP_NAME,SALARY*12 연봉 , SALARY,DEPT_TITLE 
FROM EMPLOYEE , DEPARTMENT
WHERE DEPT_CODE = DEPT_ID(+);

/*
    비등가 조인(NON EQUAL JOIN)
    매칭시킬 컬럼에 대한 조건 작성시'=' 사용하지 않는 JOIN
*/

SELECT EMP_NAME,SALARY,SAL_LEVEL
FROM EMPLOYEE,SAL_GRADE
WHERE SALARY BETWEEN MIN_SAL AND MAX_SAL
ORDER BY SAL_LEVEL;

SELECT EMP_NAME,SALARY,SAL_LEVEL
FROM EMPLOYEE JOIN SAL_GRADE ON
SALARY BETWEEN MIN_SAL AND MAX_SAL
ORDER BY SAL_LEVEL;

/*
    자체조인(SELF JOIN)
    같은 테이블을 다시 한번 조인하는 경우
*/
//오라클
SELECT E.EMP_ID,E.EMP_NAME,E.DEPT_CODE,
                M.EMP_ID,M.EMP_NAME,M.DEPT_CODE
FROM EMPLOYEE E
JOIN EMPLOYEE M ON E.MANAGER_ID = M.EMP_ID;

SELECT E.EMP_ID,E.EMP_NAME,E.DEPT_CODE,
                M.EMP_ID,M.EMP_NAME,M.DEPT_CODE
FROM EMPLOYEE E ,EMPLOYEE M 
WHERE E.MANAGER_ID = M.EMP_ID(+);

/*
    다중 JOIN
    2개 이상의 테이블 JOIN
*/

SELECT EMP_ID, EMP_NAME,DEPT_TITLE,JOB_NAME
FROM EMPLOYEE E,DEPARTMENT D,JOB J
WHERE DEPT_CODE = DEPT_ID 
AND E.JOB_CODE = J.JOB_CODE;
// ORACLE 
SELECT EMP_ID,EMP_NAME,DEPT_CODE,DEPT_TITLE,LOCATION_ID,LOCAL_NAME
FROM EMPLOYEE ,DEPARTMENT ,LOCATION
WHERE LOCATION_ID = LOCAL_CODE
AND DEPT_CODE = DEPT_ID;

//ANSI 구문
SELECT EMP_ID,EMP_NAME,DEPT_CODE,DEPT_TITLE,LOCATION_ID,LOCAL_NAME
FROM EMPLOYEE E 
JOIN DEPARTMENT D ON E.DEPT_CODE = D.DEPT_ID 
JOIN LOCATION L ON D.LOCATION_ID = L.LOCAL_CODE;


//문제
//1.
SELECT EMP_ID,EMP_NAME,DEPT_TITLE,LOCAL_NAME,NATIONAL_NAME
FROM EMPLOYEE ,DEPARTMENT ,LOCATION L ,NATIONAL N
WHERE DEPT_CODE = DEPT_ID
AND  LOCATION_ID = LOCAL_CODE
AND L.NATIONAL_CODE = N.NATIONAL_CODE ;

SELECT EMP_ID,EMP_NAME,DEPT_TITLE,LOCAL_NAME,NATIONAL_NAME
FROM EMPLOYEE JOIN DEPARTMENT 
ON DEPT_CODE = DEPT_ID JOIN LOCATION
ON LOCATION_ID = LOCAL_CODE
JOIN NATIONAL USING(NATIONAL_CODE);

//2
SELECT EMP_ID,EMP_NAME,DEPT_CODE,JOB_NAME,LOCAL_NAME,NATIONAL_NAME,SAL_LEVEL
FROM EMPLOYEE,DEPARTMENT,JOB,LOCATION L,NATIONAL N,SAL_GRADE
WHERE DEPT_CODE = DEPT_ID
AND  LOCATION_ID = LOCAL_CODE
AND L.NATIONAL_CODE = N.NATIONAL_CODE 
AND SALARY BETWEEN MIN_SAL AND MAX_SAL;

SELECT EMP_ID,EMP_NAME,DEPT_CODE,JOB_NAME,LOCAL_NAME,NATIONAL_NAME,SAL_LEVEL
FROM EMPLOYEE JOIN DEPARTMENT 
ON DEPT_CODE = DEPT_ID JOIN JOB
USING(JOB_CODE) JOIN LOCATION 
ON LOCATION_ID = LOCAL_CODE
JOIN NATIONAL USING(NATIONAL_CODE) JOIN SAL_GRADE
ON  SALARY BETWEEN MIN_SAL AND MAX_SAL;